<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.movieadmin.story.comments">
	<insert id="SC_INSERT" parameterType="com.project.movieadmin.story.comments.SCommentsVO">
		insert into scomments(nickname, content,story_num)
		values(#{nickname},#{content},#{story_num})
	</insert>

	<update id="SC_UPDATE">
		UPDATE scomments
    	SET content = #{content}
    	WHERE story_comments_num = #{story_comments_num};
	</update>

	<delete id="SC_DELETE">
		DELETE FROM scomments
    	WHERE story_comments_num = #{story_comments_num};
	</delete>

	<select id="SELECT_ONE" resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>

	<select id="SC_SELECT_ALL" resultType="com.project.movieadmin.story.comments.SCommentsVO">
		SELECT * FROM scomments  where story_num=#{story_num} ORDER BY story_comments_num DESC 
	</select>

	<select id="SELECT_ALL_PAGE_BLOCK"
		resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>
	
	<select id="SC_REMOVEEXPIRED" resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>
	
	<!--
	<select id="SC_SELECT_GOOD" resultType="int">
		select count(*) count from sc_good where nickname=#{nickname} and story_comments_num=#{story_comments_num}
	</select>
	-->
	<insert id="SC_INSERT_GOOD">
		insert into sc_good(story_comments_num,nickname) values(#{story_comments_num},#{nickname});
	</insert>
	
	<update id="SC_UPDATE_GOOD_COUNT">
		update scomments set good=
			(select count(*) count from sc_good where story_comments_num=#{story_comments_num}) 
		where story_comments_num=#{story_comments_num}	
	</update>
	<select id="SC_SELECT_GOOD_COUNT" resultType="int">
		SELECT good FROM project.scomments where story_comments_num=#{story_comments_num}
	</select>
	
	<select id="SC_UPDATE_REPORT_COUNT" resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>
	
	<select id="SC_INCREASE_GOOD" resultType="com.project.movieadmin.story.comments.SCommentsVO">
		update scomments set
		good=good+1 where
		story_comments_num=#{story_comments_num}
	</select>

	<select id="SC_SELECT_GOOD" resultType="com.project.movieadmin.story.comments.SCommentsVO">
		select good from scomments where story_comments_num=#{story_comments_num}
	</select>
	
	

	<select id="SC_GOOD_CHECK"
		resultType="int">
		select count(*) as like_count
		from goodcheck
		where nickname = #{nickname} and
		story_num = #{story_num} and
		story_comments_num = #{story_comments_num}
		
	</select>
	<select id="SC_GOOD_SAVE"
		resultType="int">
		insert into goodcheck(nickname, story_num, story_comments_num)
		values(#{nickname},#{story_num},#{story_comments_num})
	</select>

	
	<select id="LOGIN"	resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>
	
	<select id="SC_SELECT_ALL_PAGE_BLOCK_NICKNAME"
		resultType="com.project.movieadmin.story.comments.SCommentsVO">
		select * from scomments where nickname=#{vo.nickname} order by
		story_comments_num desc
		limit ${startRow},
		${pageBlock}
	</select>
	<!-- story” 테이블에서 특정 닉네임의 사용자의 이야기를 최신순으로 가져오는 것 -->
	
	
	<select id="SEARCHLIST_ID"
		resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>

	
	<select id="SEARCHLIST_NAME"
		resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>

	<select id="SEARCHLIST_PAGE_BLOCK_ID"
		resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>

	<select id="SEARCHLIST_PAGE_BLOCK_NAME"
		resultType="com.project.movieadmin.story.comments.SCommentsVO">
		
	</select>


	<select id="TOTAL_ROWS"	resultType="int">
		
	</select>

	
	<select id="SEARCH_TOTAL_ROWS_ID"	resultType="int">
	
	</select>

	
	<select id="SEARCH_TOTAL_ROWS_NAME"	resultType="int">
		
	</select>

</mapper>